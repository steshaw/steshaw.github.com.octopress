<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Shaw]]></title>
  <link href="http://steshaw.org/atom.xml" rel="self"/>
  <link href="http://steshaw.org/"/>
  <updated>2012-02-15T12:32:34+10:00</updated>
  <id>http://steshaw.org/</id>
  <author>
    <name><![CDATA[Steven Shaw]]></name>
    <email><![CDATA[steshaw@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello MathJax]]></title>
    <link href="http://steshaw.org/blog/2012/02/09/hello-mathjax/"/>
    <updated>2012-02-09T12:46:00+10:00</updated>
    <id>http://steshaw.org/blog/2012/02/09/hello-mathjax</id>
    <content type="html"><![CDATA[<p>MathJax isn&#8217;t currently supported out-of-the-box with Octopress. The main reason seems to be that the Markdown processor — rdiscount — doesn&#8217;t deal with the MathJax escaping very well. However, since <a href='http://maruku.rubyforge.org/math.xhtml'>Maruku supports it</a>, I thought I&#8217;d try switching over.</p>

<p>I made the following two changes:</p>
<figure class='code'><figcaption><span>switch Markdown processors in _config.yml</span></figcaption><div class='highlight'><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class='l-Scalar-Plain'>markdown</span><span class='p-Indicator'>:</span> <span class='l-Scalar-Plain'>maruku</span>
</span></code></pre></td></tr></table></div></figure><figure class='code'><figcaption><span>enable MathJax in source/_includes/custom/head.html </span><a href='http://www.mathjax.org/docs/1.1/start.html'>link</a></figcaption><div class='highlight'><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class='nt'>&lt;script </span><span class='na'>type=</span><span class='s'>&quot;text/x-mathjax-config&quot;</span><span class='nt'>&gt;</span>
</span><span class='line'><span class='nx'>MathJax</span><span class='p'>.</span><span class='nx'>Hub</span><span class='p'>.</span><span class='nx'>Config</span><span class='p'>({</span>
</span><span class='line'>      <span class='nx'>tex2jax</span><span class='o'>:</span> <span class='p'>{</span><span class='nx'>inlineMath</span><span class='o'>:</span> <span class='p'>[[</span><span class='s1'>&#39;$&#39;</span><span class='p'>,</span><span class='s1'>&#39;$&#39;</span><span class='p'>],</span> <span class='p'>[</span><span class='s1'>&#39;\\(&#39;</span><span class='p'>,</span><span class='s1'>&#39;\\)&#39;</span><span class='p'>]]}</span>
</span><span class='line'>      <span class='p'>});</span>
</span><span class='line'><span class='nt'>&lt;/script&gt;</span>
</span><span class='line'><span class='nt'>&lt;script </span><span class='na'>type=</span><span class='s'>&quot;text/javascript&quot;</span> <span class='na'>src=</span><span class='s'>&quot;path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>This allows for inline $\TeX$ expressions between dollar signs e.g. <code>$\TeX$</code>. MathJax <em>display</em> expressions (i.e. non-inline) are delimited by double dollar signs:</p>
<figure class='code'><figcaption><span>example expression from Paul Snivey&#8217;s article </span><a href='http://psnively.github.com/2010/03/13/100-proof.html'>link</a></figcaption><div class='highlight'><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class='sb'>$$</span><span class='nv'>\forall</span><span class='nb'> x, y : </span><span class='nv'>\mathbb</span><span class='nb'>{Z}, x &gt; </span><span class='m'>3</span><span class='nb'> </span><span class='nv'>\land</span><span class='nb'> y &lt; </span><span class='m'>2</span><span class='nb'> </span><span class='nv'>\Rightarrow</span><span class='nb'> x^</span><span class='m'>2</span><span class='nb'> </span><span class='o'>-</span><span class='nb'> </span><span class='m'>2</span><span class='nb'>y &gt; </span><span class='m'>5</span><span class='s'>$$</span>
</span></code></pre></td></tr></table></div></figure>
<p>renders as:</p>

<p>$$\forall x, y : \mathbb{Z}, x &gt; 3 \land y &lt; 2 \Rightarrow x^2 - 2y &gt; 5$$</p>

<h2 id='rightclick_issue'>Right-click issue</h2>

<p>There was also a problem with the theme. When right clicking a MathJax expression, the whole page goes blank! Zete has a great fix for this:</p>
<figure class='code'><figcaption><span>fix for right-click </span><a href='http://luikore.github.com/2011/09/good-things-learned-from-octopress/'>link</a></figcaption><div class='highlight'><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class='gh'>diff --git a/sass/base/_theme.scss b/sass/base/_theme.scss</span>
</span><span class='line'><span class='gh'>index 9a50a8b..fc9dc37 100644</span>
</span><span class='line'><span class='gd'>--- a/sass/base/_theme.scss</span>
</span><span class='line'><span class='gi'>+++ b/sass/base/_theme.scss</span>
</span><span class='line'><span class='gu'>@@ -75,7 +75,7 @@ html {</span>
</span><span class='line'>   background: $page-bg image-url(&#39;line-tile.png&#39;) top left;
</span><span class='line'> }
</span><span class='line'> body {
</span><span class='line'><span class='gd'>-  &gt; div {</span>
</span><span class='line'><span class='gi'>+  &gt; div#main {</span>
</span><span class='line'>     background: $sidebar-bg $noise-bg;
</span><span class='line'>     border-bottom: 1px solid $page-border-bottom;
</span><span class='line'>     &gt; div {
</span></code></pre></td></tr></table></div></figure>
<h2 id='futher_reading'>Futher reading</h2>

<ul>
<li><a href='http://luikore.github.com/2011/09/good-things-learned-from-octopress/'>Starting from Octopress</a></li>

<li><a href='http://doswa.com/2011/07/20/mathjax-in-markdown.html'>MathJax in Markdown</a></li>

<li><a href='http://cwoebker.com/posts/latex-math-magic/'>LaTeX Math Magic</a></li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebooting with Octopress]]></title>
    <link href="http://steshaw.org/blog/2012/02/03/rebooting-with-octopress/"/>
    <updated>2012-02-03T16:22:00+10:00</updated>
    <id>http://steshaw.org/blog/2012/02/03/rebooting-with-octopress</id>
    <content type="html"><![CDATA[<p>I&#8217;m starting with a clean slate and moving to <a href='http://octopress.org/'>Octopress</a>.</p>

<p>Haskell source code highlighting appears to work out of the box:</p>
<figure class='code'><figcaption><span>Run length encoding </span><a href='http://rosettacode.org/wiki/Run-length_encoding#Haskell'>link</a></figcaption><div class='highlight'><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class='kr'>import</span> <span class='nn'>Data.List</span> <span class='p'>(</span><span class='nf'>group</span><span class='p'>)</span>
</span><span class='line'>
</span><span class='line'><span class='c1'>-- Datatypes</span>
</span><span class='line'><span class='kr'>type</span> <span class='kt'>Encoded</span> <span class='ow'>=</span> <span class='p'>[(</span><span class='kt'>Int</span><span class='p'>,</span> <span class='kt'>Char</span><span class='p'>)]</span>  <span class='c1'>-- An encoded String with form [(times, char), ...]</span>
</span><span class='line'><span class='kr'>type</span> <span class='kt'>Decoded</span> <span class='ow'>=</span> <span class='kt'>String</span>
</span><span class='line'>
</span><span class='line'><span class='c1'>-- Takes a decoded string and returns an encoded list of tuples</span>
</span><span class='line'><span class='nf'>rlencode</span> <span class='ow'>::</span> <span class='kt'>Decoded</span> <span class='ow'>-&gt;</span> <span class='kt'>Encoded</span>
</span><span class='line'><span class='nf'>rlencode</span> <span class='ow'>=</span> <span class='n'>map</span> <span class='p'>(</span><span class='nf'>\</span><span class='n'>g</span> <span class='ow'>-&gt;</span> <span class='p'>(</span><span class='n'>length</span> <span class='n'>g</span><span class='p'>,</span> <span class='n'>head</span> <span class='n'>g</span><span class='p'>))</span> <span class='o'>.</span> <span class='n'>group</span>
</span><span class='line'>
</span><span class='line'><span class='c1'>-- Takes an encoded list of tuples and returns the associated decoded String</span>
</span><span class='line'><span class='nf'>rldecode</span> <span class='ow'>::</span> <span class='kt'>Encoded</span> <span class='ow'>-&gt;</span> <span class='kt'>Decoded</span>
</span><span class='line'><span class='nf'>rldecode</span> <span class='ow'>=</span> <span class='n'>concatMap</span> <span class='n'>decodeTuple</span>
</span><span class='line'>    <span class='kr'>where</span> <span class='n'>decodeTuple</span> <span class='p'>(</span><span class='n'>n</span><span class='p'>,</span><span class='n'>c</span><span class='p'>)</span> <span class='ow'>=</span> <span class='n'>replicate</span> <span class='n'>n</span> <span class='n'>c</span>
</span><span class='line'>
</span><span class='line'><span class='nf'>main</span> <span class='ow'>::</span> <span class='kt'>IO</span> <span class='nb'>()</span>
</span><span class='line'><span class='nf'>main</span> <span class='ow'>=</span> <span class='kr'>do</span>
</span><span class='line'>  <span class='c1'>-- Get input</span>
</span><span class='line'>  <span class='n'>putStr</span> <span class='s'>&quot;String to encode: &quot;</span>
</span><span class='line'>  <span class='n'>input</span> <span class='ow'>&lt;-</span> <span class='n'>getLine</span>
</span><span class='line'>  <span class='c1'>-- Output encoded and decoded versions of input</span>
</span><span class='line'>  <span class='kr'>let</span> <span class='n'>encoded</span> <span class='ow'>=</span> <span class='n'>rlencode</span> <span class='n'>input</span>
</span><span class='line'>      <span class='n'>decoded</span> <span class='ow'>=</span> <span class='n'>rldecode</span> <span class='n'>encoded</span>
</span><span class='line'>  <span class='n'>putStrLn</span> <span class='o'>$</span> <span class='s'>&quot;Encoded: &quot;</span> <span class='o'>++</span> <span class='n'>show</span> <span class='n'>encoded</span> <span class='o'>++</span> <span class='s'>&quot;</span><span class='se'>\n</span><span class='s'>Decoded: &quot;</span> <span class='o'>++</span> <span class='n'>show</span> <span class='n'>decoded</span>
</span></code></pre></td></tr></table></div></figure>
<p>as does Scala:</p>
<figure class='code'><figcaption><span /></figcaption><div class='highlight'><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class='k'>import</span> <span class='nn'>scala.collection.mutable</span>
</span><span class='line'>
</span><span class='line'><span class='k'>def</span> <span class='n'>countWords</span><span class='o'>(</span><span class='n'>text</span><span class='k'>:</span> <span class='kt'>String</span><span class='o'>)</span> <span class='k'>=</span> <span class='o'>{</span>
</span><span class='line'>  <span class='k'>val</span> <span class='n'>counts</span> <span class='k'>=</span> <span class='n'>mutable</span><span class='o'>.</span><span class='nc'>Map</span><span class='o'>[</span><span class='kt'>String</span>, <span class='kt'>Int</span><span class='o'>]()</span>
</span><span class='line'>  <span class='k'>for</span> <span class='o'>(</span><span class='n'>word</span> <span class='k'>&lt;-</span> <span class='n'>text</span><span class='o'>.</span><span class='n'>split</span><span class='o'>(</span><span class='s'>&quot;[ ,!.]+&quot;</span><span class='o'>))</span> <span class='o'>{</span>
</span><span class='line'>    <span class='k'>val</span> <span class='n'>lowerWord</span> <span class='k'>=</span> <span class='n'>word</span><span class='o'>.</span><span class='n'>toLowerCase</span>
</span><span class='line'>    <span class='k'>val</span> <span class='n'>oldCount</span> <span class='k'>=</span> <span class='n'>counts</span><span class='o'>.</span><span class='n'>getOrElse</span><span class='o'>(</span><span class='n'>lowerWord</span><span class='o'>,</span> <span class='mi'>0</span><span class='o'>)</span>
</span><span class='line'>    <span class='n'>counts</span><span class='o'>(</span><span class='n'>lowerWord</span><span class='o'>)</span> <span class='k'>=</span> <span class='n'>oldCount</span> <span class='o'>+</span> <span class='mi'>1</span>
</span><span class='line'>  <span class='o'>}</span>
</span><span class='line'>  <span class='n'>counts</span>
</span><span class='line'><span class='o'>}</span>
</span><span class='line'>
</span><span class='line'><span class='k'>val</span> <span class='n'>text</span> <span class='k'>=</span> <span class='s'>&quot;See Spot run. Run, Spot. Run!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class='n'>countWords</span><span class='o'>(</span><span class='n'>text</span><span class='o'>)</span> <span class='n'>foreach</span> <span class='n'>println</span>
</span></code></pre></td></tr></table></div></figure>]]></content>
  </entry>
  
</feed>
